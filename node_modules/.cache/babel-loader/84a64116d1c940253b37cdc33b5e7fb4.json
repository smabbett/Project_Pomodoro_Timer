{"ast":null,"code":"var _jsxFileName = \"/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from 'react';\nimport classNames from '../utils/class-names';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport useInterval from '../utils/useInterval';\nimport ChangeBreakTimer from './ChangeBreakTimer';\nimport ChangeFocusTimer from './ChangeFocusTimer';\nimport SessionRunning from './SessionRunning';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); //Focus time starts at 25 minutes/1500 seconds\n\n  const [focusTimer, setFocusTimer] = useState(1500); //Break time starts at 5 minutes/300 seconds\n\n  const [breakTimer, setBreakTimer] = useState(300); //user inputted times for focus and break\n\n  const [inputBreakTime, setInputBreakTime] = useState(5);\n  const [inputFocusTime, setInputFocusTime] = useState(25);\n  const [isSessionStopped, setIsSessionStopped] = useState(true);\n  useInterval(() => {\n    const audioEl = document.getElementsByClassName('audio-element')[0];\n    console.log('focusTimer, breakTimer', focusTimer, breakTimer);\n    console.log('inputFocus, inputBreak', inputFocusTime, inputBreakTime);\n\n    if (sessionType === 'focus') {\n      setFocusTimer(Math.max(focusTimer - 1, 0));\n\n      if (focusTimer === 0) {\n        audioEl.play();\n        setSessionType('break');\n        setFocusTimer(inputFocusTime * 60);\n      }\n\n      if (sessionType === 'break') {\n        setBreakTimer(Math.max(breakTimer - 1, 0));\n\n        if (breakTimer === 0) {\n          audioEl.play();\n          setSessionType('focus');\n          setBreakTimer(inputBreakTime * 60);\n        }\n      }\n    } // ToDo: Implement what should happen when the timer is running\n\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsSessionStopped(false);\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setIsSessionStopped(true);\n    setFocusTimer(1500);\n    setBreakTimer(300);\n    setInputBreakTime(5);\n    setInputFocusTime(25);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    className: \"audio-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: \"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChangeFocusTimer, {\n    setFocusTimer: setFocusTimer,\n    setInputFocusTime: setInputFocusTime,\n    inputFocusTime: inputFocusTime,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ChangeBreakTimer, {\n    setBreakTimer: setBreakTimer,\n    setInputBreakTime: setInputBreakTime,\n    isTimerRunning: isTimerRunning,\n    inputBreakTime: inputBreakTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      'oi-media-play': !isTimerRunning,\n      'oi-media-pause': isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: stopSession,\n    disabled: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, isSessionStopped ? null : /*#__PURE__*/React.createElement(SessionRunning, {\n    inputFocusTime: inputFocusTime,\n    inputBreakTime: inputBreakTime,\n    focusTimer: focusTimer,\n    breakTimer: breakTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","minutesToDuration","secondsToDuration","useInterval","ChangeBreakTimer","ChangeFocusTimer","SessionRunning","Pomodoro","isTimerRunning","setIsTimerRunning","focusTimer","setFocusTimer","breakTimer","setBreakTimer","inputBreakTime","setInputBreakTime","inputFocusTime","setInputFocusTime","isSessionStopped","setIsSessionStopped","audioEl","document","getElementsByClassName","console","log","sessionType","Math","max","play","setSessionType","playPause","prevState","stopSession","oi"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport classNames from '../utils/class-names';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport useInterval from '../utils/useInterval';\nimport ChangeBreakTimer from './ChangeBreakTimer';\nimport ChangeFocusTimer from './ChangeFocusTimer';\nimport SessionRunning from './SessionRunning';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  //Focus time starts at 25 minutes/1500 seconds\n  const [focusTimer, setFocusTimer] = useState(1500);\n  //Break time starts at 5 minutes/300 seconds\n  const [breakTimer, setBreakTimer] = useState(300);\n  //user inputted times for focus and break\n\n  const [inputBreakTime, setInputBreakTime] = useState(5);\n  const [inputFocusTime, setInputFocusTime] = useState(25);\n\n  const [isSessionStopped, setIsSessionStopped] = useState(true);\n\n  useInterval(\n    () => {\n      const audioEl = document.getElementsByClassName('audio-element')[0];\n\n      console.log('focusTimer, breakTimer', focusTimer, breakTimer);\n      console.log('inputFocus, inputBreak', inputFocusTime, inputBreakTime);\n\n      if (sessionType === 'focus') {\n        setFocusTimer(Math.max(focusTimer - 1, 0));\n        if (focusTimer === 0) {\n          audioEl.play();\n          setSessionType('break');\n          setFocusTimer(inputFocusTime * 60);\n        }\n\n        if (sessionType === 'break') {\n          setBreakTimer(Math.max(breakTimer - 1, 0));\n          if (breakTimer === 0) {\n            audioEl.play();\n            setSessionType('focus');\n            setBreakTimer(inputBreakTime * 60);\n          }\n        }\n      }\n\n      // ToDo: Implement what should happen when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsSessionStopped(false);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setIsSessionStopped(true);\n    setFocusTimer(1500);\n    setBreakTimer(300);\n    setInputBreakTime(5);\n    setInputFocusTime(25);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <audio className=\"audio-element\">\n        <source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"></source>\n      </audio>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ChangeFocusTimer\n            setFocusTimer={setFocusTimer}\n            setInputFocusTime={setInputFocusTime}\n            inputFocusTime={inputFocusTime}\n            isTimerRunning={isTimerRunning}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <ChangeBreakTimer\n              setBreakTimer={setBreakTimer}\n              setInputBreakTime={setInputBreakTime}\n              isTimerRunning={isTimerRunning}\n              inputBreakTime={inputBreakTime}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  'oi-media-play': !isTimerRunning,\n                  'oi-media-pause': isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={stopSession}\n              disabled={!isTimerRunning}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {isSessionStopped ? null : (\n          <SessionRunning\n            inputFocusTime={inputFocusTime}\n            inputBreakTime={inputBreakTime}\n            focusTimer={focusTimer}\n            breakTimer={breakTimer}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React,{useState}from'react';import{minutesToDuration,secondsToDuration}from'../utils/duration';import classNames from'../utils/class-names';var SessionRunning=function SessionRunning(props){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"h2\",{\"data-testid\":\"session-title\"},props.sessionType==='focus'?//need to import inputFocusTimer so this doesn't countdown\n\"Focusing for \".concat(minutesToDuration(props.inputFocusTime),\" minutes\"):\"On Break for \".concat(minutesToDuration(props.inputBreakTime),\" minutes\")),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\",\"data-testid\":\"session-sub-title\"},props.sessionType==='focus'?secondsToDuration(props.focusTimer):secondsToDuration(props.breakTimer),' ',\"remaining\"),/*#__PURE__*/React.createElement(\"p\",{className:classNames({invisible:props.isTimerRunning,visible:!props.isTimerRunning})},\"PAUSED\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\",style:{height:'20px'}},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",\"aria-valuenow\":props.sessionType==='focus'?100-props.focusTimer/(props.inputFocusTime*60)*100:100-props.breakTimer/(props.inputBreakTime*60)*100// TODO: Increase aria-valuenow as elapsed time increases\n,style:props.sessionType==='focus'?{width:\"\".concat(100-props.focusTimer/(props.inputFocusTime*60)*100,\"%\")}:{width:\"\".concat(100-props.breakTimer/(props.inputBreakTime*60)*100,\"%\")}// TODO: Increase width % as elapsed time increases\n})))));};export default SessionRunning;","map":{"version":3,"sources":["/Users/sarahabbett/Documents/Repos/Project_Pomodoro_Timer/src/pomodoro/SessionRunning.js"],"names":["React","useState","minutesToDuration","secondsToDuration","classNames","SessionRunning","props","sessionType","inputFocusTime","inputBreakTime","focusTimer","breakTimer","invisible","isTimerRunning","visible","height","width"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,iBAAT,CAA4BC,iBAA5B,KAAqD,mBAArD,CACA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CAChC,mBACE,4CAUE,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eAEE,0BAAI,cAAY,eAAhB,EACGA,KAAK,CAACC,WAAN,GAAsB,OAAtB,CACG;AADH,uBAEmBL,iBAAiB,CAC/BI,KAAK,CAACE,cADyB,CAFpC,oCAKmBN,iBAAiB,CAC/BI,KAAK,CAACG,cADyB,CALpC,YADH,CAFF,cAaE,yBAAG,SAAS,CAAC,MAAb,CAAoB,cAAY,mBAAhC,EACGH,KAAK,CAACC,WAAN,GAAsB,OAAtB,CACGJ,iBAAiB,CAACG,KAAK,CAACI,UAAP,CADpB,CAEGP,iBAAiB,CAACG,KAAK,CAACK,UAAP,CAHvB,CAG2C,GAH3C,aAbF,cAmBE,yBACE,SAAS,CAAEP,UAAU,CAAC,CACpBQ,SAAS,CAAEN,KAAK,CAACO,cADG,CAEpBC,OAAO,CAAE,CAACR,KAAK,CAACO,cAFI,CAAD,CADvB,WAnBF,CADF,CAVF,cAwCE,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,UAAf,CAA0B,KAAK,CAAE,CAAEE,MAAM,CAAE,MAAV,CAAjC,eACE,2BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,aAFP,CAGE,gBAAc,GAHhB,CAIE,gBAAc,KAJhB,CAKE,gBACET,KAAK,CAACC,WAAN,GAAsB,OAAtB,CACI,IAAOD,KAAK,CAACI,UAAN,EAAoBJ,KAAK,CAACE,cAAN,CAAuB,EAA3C,CAAD,CAAmD,GAD7D,CAEI,IAAOF,KAAK,CAACK,UAAN,EAAoBL,KAAK,CAACG,cAAN,CAAuB,EAA3C,CAAD,CAAmD,GAC7D;AATJ,CAUE,KAAK,CACHH,KAAK,CAACC,WAAN,GAAsB,OAAtB,CACI,CACES,KAAK,WACH,IACCV,KAAK,CAACI,UAAN,EAAoBJ,KAAK,CAACE,cAAN,CAAuB,EAA3C,CAAD,CAAmD,GAFhD,KADP,CADJ,CAOI,CACEQ,KAAK,WACH,IACCV,KAAK,CAACK,UAAN,EAAoBL,KAAK,CAACG,cAAN,CAAuB,EAA3C,CAAD,CAAmD,GAFhD,KADP,CAMJ;AAxBJ,EADF,CADF,CADF,CAxCF,CADF,CA2ED,CA5ED,CA6EA,cAAeJ,CAAAA,cAAf","sourcesContent":["import React, { useState } from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport classNames from '../utils/class-names';\n\nconst SessionRunning = (props) => {\n  return (\n    <div>\n      {/* <span\n          className={classNames({\n            invisible: isSessionStopped,\n            visible: !isSessionStopped,\n          })}\n        /> */}\n\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            {props.sessionType === 'focus'\n              ? //need to import inputFocusTimer so this doesn't countdown\n                `Focusing for ${minutesToDuration(\n                  props.inputFocusTime\n                )} minutes`\n              : `On Break for ${minutesToDuration(\n                  props.inputBreakTime\n                )} minutes`}\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {props.sessionType === 'focus'\n              ? secondsToDuration(props.focusTimer)\n              : secondsToDuration(props.breakTimer)}{' '}\n            remaining\n          </p>\n          <p\n            className={classNames({\n              invisible: props.isTimerRunning,\n              visible: !props.isTimerRunning,\n            })}\n          >\n            PAUSED\n          </p>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: '20px' }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={\n                props.sessionType === 'focus'\n                  ? 100 - (props.focusTimer / (props.inputFocusTime * 60)) * 100\n                  : 100 - (props.breakTimer / (props.inputBreakTime * 60)) * 100\n              } // TODO: Increase aria-valuenow as elapsed time increases\n              style={\n                props.sessionType === 'focus'\n                  ? {\n                      width: `${\n                        100 -\n                        (props.focusTimer / (props.inputFocusTime * 60)) * 100\n                      }%`,\n                    }\n                  : {\n                      width: `${\n                        100 -\n                        (props.breakTimer / (props.inputBreakTime * 60)) * 100\n                      }%`,\n                    }\n              } // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default SessionRunning;\n"]},"metadata":{},"sourceType":"module"}
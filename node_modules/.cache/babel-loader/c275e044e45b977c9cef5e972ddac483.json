{"ast":null,"code":"var _jsxFileName = \"/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from 'react';\nimport classNames from '../utils/class-names';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport useInterval from '../utils/useInterval';\nimport ChangeBreakTimer from './ChangeBreakTimer';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); //Focus time starts at 25 minutes/1500 seconds\n\n  const [focusTimer, setFocusTimer] = useState(1500); //Break time starts at 5 minutes/300 seconds\n\n  const [breakTimer, setBreakTimer] = useState(300); //user inputted times for focus and break\n\n  const [isSessionStopped, setIsSessionStopped] = useState(true);\n  useInterval(() => {\n    setFocusTimer(Math.max(focusTimer - 1, 0));\n\n    if (focusTimer === 0) {\n      const audioEl = document.getElementsByClassName('audio-element')[0];\n      audioEl.play();\n      setBreakTimer(Math.max(breakTimer - 1, 0));\n    } // ToDo: Implement what should happen when the timer is running\n\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setIsSessionStopped(true);\n    setFocusTimer(1500);\n    setBreakTimer(300);\n    setInputBreakTime(5);\n    setInputFocusTime(25);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    className: \"audio-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: \"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChangeFocusTimer, {\n    passFocusTime: setFocusTimer,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ChangeBreakTimer, {\n    passBreakTime: setBreakTimer,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      'oi-media-play': !isTimerRunning,\n      'oi-media-pause': isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: stopSession,\n    disabled: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, focusTimer > 0 ? `Focusing for ${minutesToDuration(inputFocusTime)} minutes` : `On Break for ${minutesToDuration(inputBreakTime)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, focusTimer > 0 ? secondsToDuration(focusTimer) : secondsToDuration(breakTimer), ' ', \"remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": focusTimer > 0 ? 100 - focusTimer / (inputFocusTime * 60) * 100 : 100 - breakTimer / (inputBreakTime * 60) * 100 // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: focusTimer > 0 ? {\n      width: `${100 - focusTimer / (inputFocusTime * 60) * 100}%`\n    } : {\n      width: `${100 - breakTimer / (inputBreakTime * 60) * 100}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","minutesToDuration","secondsToDuration","useInterval","ChangeBreakTimer","Pomodoro","isTimerRunning","setIsTimerRunning","focusTimer","setFocusTimer","breakTimer","setBreakTimer","isSessionStopped","setIsSessionStopped","Math","max","audioEl","document","getElementsByClassName","play","playPause","prevState","stopSession","setInputBreakTime","setInputFocusTime","oi","inputFocusTime","inputBreakTime","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,KAAD,CAApD,CAFkB,CAGlB;;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAD,CAA5C,CAJkB,CAKlB;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,GAAD,CAA5C,CANkB,CAOlB;;AAEA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,IAAD,CAAxD;AAEAI,EAAAA,WAAW,CACT,MAAM;AACJM,IAAAA,aAAa,CAACK,IAAI,CAACC,GAAL,CAASP,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAD,CAAb;;AAEA,QAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,YAAMQ,OAAO,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,eAAhC,EAAiD,CAAjD,CAAhB;AACAF,MAAAA,OAAO,CAACG,IAAR;AACAR,MAAAA,aAAa,CAACG,IAAI,CAACC,GAAL,CAASL,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAD,CAAb;AACD,KAPG,CASJ;;AACD,GAXQ,EAYTJ,cAAc,GAAG,IAAH,GAAU,IAZf,CAAX;;AAeA,WAASc,SAAT,GAAqB;AACnBb,IAAAA,iBAAiB,CAAEc,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACD;;AAED,WAASC,WAAT,GAAuB;AACrBf,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAM,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAJ,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,aAAa,CAAC,GAAD,CAAb;AACAY,IAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACAC,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,GAAG,EAAC,0DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,aAAa,EAAEf,aADjB;AAEE,IAAA,cAAc,EAAEH,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAOE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,aAAa,EAAEK,aADjB;AAEE,IAAA,cAAc,EAAEL,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAPF,CAJF,eAoBE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,6BADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,kBAAW,gBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,iBAFZ;AAGE,mBAAY,YAHd;AAIE,IAAA,KAAK,EAAC,sBAJR;AAKE,IAAA,OAAO,EAAEc,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,SAAS,EAAEpB,UAAU,CAAC;AACpByB,MAAAA,EAAE,EAAE,IADgB;AAEpB,uBAAiB,CAACnB,cAFE;AAGpB,wBAAkBA;AAHE,KAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CALF,eAqBE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,KAAK,EAAC,kBAHR;AAIE,IAAA,OAAO,EAAEgB,WAJX;AAKE,IAAA,QAAQ,EAAE,CAAChB,cALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CArBF,CADF,CADF,CApBF,eAuDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,UAAU,GAAG,CAAb,GACI,gBAAeP,iBAAiB,CAACyB,cAAD,CAAiB,UADrD,GAEI,gBAAezB,iBAAiB,CAAC0B,cAAD,CAAiB,UAHxD,CAFF,eAQE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,UAAU,GAAG,CAAb,GACGN,iBAAiB,CAACM,UAAD,CADpB,GAEGN,iBAAiB,CAACQ,UAAD,CAHvB,EAGqC,GAHrC,cARF,CADF,CATF,eA0BE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEkB,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBACEpB,UAAU,GAAG,CAAb,GACI,MAAOA,UAAU,IAAIkB,cAAc,GAAG,EAArB,CAAX,GAAuC,GADjD,GAEI,MAAOhB,UAAU,IAAIiB,cAAc,GAAG,EAArB,CAAX,GAAuC,GARrD,CASI;AATJ;AAUE,IAAA,KAAK,EACHnB,UAAU,GAAG,CAAb,GACI;AACEqB,MAAAA,KAAK,EAAG,GACN,MAAOrB,UAAU,IAAIkB,cAAc,GAAG,EAArB,CAAX,GAAuC,GAC9C;AAHH,KADJ,GAMI;AACEG,MAAAA,KAAK,EAAG,GACN,MAAOnB,UAAU,IAAIiB,cAAc,GAAG,EAArB,CAAX,GAAuC,GAC9C;AAHH,KAjBR,CAsBI;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CA1BF,CAvDF,CADF;AAmHD;;AAED,eAAetB,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport classNames from '../utils/class-names';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport useInterval from '../utils/useInterval';\nimport ChangeBreakTimer from './ChangeBreakTimer';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  //Focus time starts at 25 minutes/1500 seconds\n  const [focusTimer, setFocusTimer] = useState(1500);\n  //Break time starts at 5 minutes/300 seconds\n  const [breakTimer, setBreakTimer] = useState(300);\n  //user inputted times for focus and break\n\n  const [isSessionStopped, setIsSessionStopped] = useState(true);\n\n  useInterval(\n    () => {\n      setFocusTimer(Math.max(focusTimer - 1, 0));\n\n      if (focusTimer === 0) {\n        const audioEl = document.getElementsByClassName('audio-element')[0];\n        audioEl.play();\n        setBreakTimer(Math.max(breakTimer - 1, 0));\n      }\n\n      // ToDo: Implement what should happen when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setIsSessionStopped(true);\n    setFocusTimer(1500);\n    setBreakTimer(300);\n    setInputBreakTime(5);\n    setInputFocusTime(25);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <audio className=\"audio-element\">\n        <source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"></source>\n      </audio>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ChangeFocusTimer\n            passFocusTime={setFocusTimer}\n            isTimerRunning={isTimerRunning}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <ChangeBreakTimer\n              passBreakTime={setBreakTimer}\n              isTimerRunning={isTimerRunning}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  'oi-media-play': !isTimerRunning,\n                  'oi-media-pause': isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={stopSession}\n              disabled={!isTimerRunning}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* <span\n          className={classNames({\n            invisible: isSessionStopped,\n            visible: !isSessionStopped,\n          })}\n        /> */}\n\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">\n              {focusTimer > 0\n                ? `Focusing for ${minutesToDuration(inputFocusTime)} minutes`\n                : `On Break for ${minutesToDuration(inputBreakTime)} minutes`}\n            </h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {focusTimer > 0\n                ? secondsToDuration(focusTimer)\n                : secondsToDuration(breakTimer)}{' '}\n              remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: '20px' }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={\n                  focusTimer > 0\n                    ? 100 - (focusTimer / (inputFocusTime * 60)) * 100\n                    : 100 - (breakTimer / (inputBreakTime * 60)) * 100\n                } // TODO: Increase aria-valuenow as elapsed time increases\n                style={\n                  focusTimer > 0\n                    ? {\n                        width: `${\n                          100 - (focusTimer / (inputFocusTime * 60)) * 100\n                        }%`,\n                      }\n                    : {\n                        width: `${\n                          100 - (breakTimer / (inputBreakTime * 60)) * 100\n                        }%`,\n                      }\n                } // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}
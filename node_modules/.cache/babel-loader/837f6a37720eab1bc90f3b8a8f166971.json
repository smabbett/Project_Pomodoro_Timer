{"ast":null,"code":"var _jsxFileName = \"/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/SessionRunning.js\";\nimport React, { useState } from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nconst SessionRunning = () => {\n  if (!isSessionStopped) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, focusTimer > 0 ? //need to import inputFocusTimer so this doesn't countdown\n    `Focusing for ${secondsToDuration(focusTimer)} minutes` : `On Break for ${secondsToDuration(breakTimer)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, focusTimer > 0 ? secondsToDuration(focusTimer) : secondsToDuration(breakTimer), ' ', \"remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": focusTimer > 0 ? 100 - focusTimer / (focusTimer * 60) * 100 : 100 - breakTimer / (breakTimer * 60) * 100 // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: focusTimer > 0 ? {\n        width: `${100 - focusTimer / (focusTimer * 60) * 100}%`\n      } : {\n        width: `${100 - breakTimer / (breakTimer * 60) * 100}%`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    })))));\n  }\n};\n\nexport default SessionRunning;","map":{"version":3,"sources":["/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/SessionRunning.js"],"names":["React","useState","minutesToDuration","secondsToDuration","SessionRunning","isSessionStopped","focusTimer","breakTimer","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,MAAI,CAACC,gBAAL,EAAuB;AACrB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,UAAU,GAAG,CAAb,GACG;AACC,oBAAeH,iBAAiB,CAACG,UAAD,CAAa,UAFjD,GAGI,gBAAeH,iBAAiB,CAACI,UAAD,CAAa,UAJpD,CAFF,eASE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,UAAU,GAAG,CAAb,GACGH,iBAAiB,CAACG,UAAD,CADpB,GAEGH,iBAAiB,CAACI,UAAD,CAHvB,EAGqC,GAHrC,cATF,CADF,CAVF,eA4BE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBACEF,UAAU,GAAG,CAAb,GACI,MAAOA,UAAU,IAAIA,UAAU,GAAG,EAAjB,CAAX,GAAmC,GAD7C,GAEI,MAAOC,UAAU,IAAIA,UAAU,GAAG,EAAjB,CAAX,GAAmC,GARjD,CASI;AATJ;AAUE,MAAA,KAAK,EACHD,UAAU,GAAG,CAAb,GACI;AACEG,QAAAA,KAAK,EAAG,GACN,MAAOH,UAAU,IAAIA,UAAU,GAAG,EAAjB,CAAX,GAAmC,GAC1C;AAHH,OADJ,GAMI;AACEG,QAAAA,KAAK,EAAG,GACN,MAAOF,UAAU,IAAIA,UAAU,GAAG,EAAjB,CAAX,GAAmC,GAC1C;AAHH,OAjBR,CAsBI;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CA5BF,CADF;AA6DD;AACF,CAhED;;AAiEA,eAAeH,cAAf","sourcesContent":["import React, { useState } from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nconst SessionRunning = () => {\n  if (!isSessionStopped) {\n    return (\n      <div>\n        {/* <span\n          className={classNames({\n            invisible: isSessionStopped,\n            visible: !isSessionStopped,\n          })}\n        /> */}\n\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">\n              {focusTimer > 0\n                ? //need to import inputFocusTimer so this doesn't countdown\n                  `Focusing for ${secondsToDuration(focusTimer)} minutes`\n                : `On Break for ${secondsToDuration(breakTimer)} minutes`}\n            </h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {focusTimer > 0\n                ? secondsToDuration(focusTimer)\n                : secondsToDuration(breakTimer)}{' '}\n              remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: '20px' }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={\n                  focusTimer > 0\n                    ? 100 - (focusTimer / (focusTimer * 60)) * 100\n                    : 100 - (breakTimer / (breakTimer * 60)) * 100\n                } // TODO: Increase aria-valuenow as elapsed time increases\n                style={\n                  focusTimer > 0\n                    ? {\n                        width: `${\n                          100 - (focusTimer / (focusTimer * 60)) * 100\n                        }%`,\n                      }\n                    : {\n                        width: `${\n                          100 - (breakTimer / (breakTimer * 60)) * 100\n                        }%`,\n                      }\n                } // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\nexport default SessionRunning;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/SessionRunning.js\";\nimport React, { useState } from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nconst SessionRunning = props => {\n  return;\n\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, props.focusTimer > 0 ? //need to import inputFocusTimer so this doesn't countdown\n  `Focusing for ${secondsToDuration(props.inputFocusTime)} minutes` : `On Break for ${secondsToDuration(props.inputBreakTime)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, props.focusTimer > 0 ? secondsToDuration(props.focusTimer) : secondsToDuration(props.breakTimer), ' ', \"remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": props.focusTimer > 0 ? 100 - props.focusTimer / (props.inputFocusTime * 60) * 100 : 100 - props.breakTimer / (props.inputBreakTime * 60) * 100 // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: props.focusTimer > 0 ? {\n      width: `${100 - props.focusTimer / (props.inputFocusTime * 60) * 100}%`\n    } : {\n      width: `${100 - props.breakTimer / (props.inputBreakTime * 60) * 100}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  })))));\n};\n\nexport default SessionRunning;","map":{"version":3,"sources":["/Users/sarahabbett/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/SessionRunning.js"],"names":["React","useState","minutesToDuration","secondsToDuration","SessionRunning","props","focusTimer","inputFocusTime","inputBreakTime","breakTimer","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACC,UAAN,GAAmB,CAAnB,GACG;AACC,kBAAeH,iBAAiB,CAACE,KAAK,CAACE,cAAP,CAAuB,UAF3D,GAGI,gBAAeJ,iBAAiB,CAACE,KAAK,CAACG,cAAP,CAAuB,UAJ9D,CAFF,eASE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACC,UAAN,GAAmB,CAAnB,GACGH,iBAAiB,CAACE,KAAK,CAACC,UAAP,CADpB,GAEGH,iBAAiB,CAACE,KAAK,CAACI,UAAP,CAHvB,EAG2C,GAH3C,cATF,CADF,CAVF,eA4BE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBACEL,KAAK,CAACC,UAAN,GAAmB,CAAnB,GACI,MAAOD,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,cAAN,GAAuB,EAA3C,CAAD,GAAmD,GAD7D,GAEI,MAAOF,KAAK,CAACI,UAAN,IAAoBJ,KAAK,CAACG,cAAN,GAAuB,EAA3C,CAAD,GAAmD,GARjE,CASI;AATJ;AAUE,IAAA,KAAK,EACHH,KAAK,CAACC,UAAN,GAAmB,CAAnB,GACI;AACEK,MAAAA,KAAK,EAAG,GACN,MACCN,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,cAAN,GAAuB,EAA3C,CAAD,GAAmD,GACpD;AAJH,KADJ,GAOI;AACEI,MAAAA,KAAK,EAAG,GACN,MACCN,KAAK,CAACI,UAAN,IAAoBJ,KAAK,CAACG,cAAN,GAAuB,EAA3C,CAAD,GAAmD,GACpD;AAJH,KAlBR,CAwBI;AAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CA5BF;AA6DD,CA/DD;;AAgEA,eAAeJ,cAAf","sourcesContent":["import React, { useState } from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nconst SessionRunning = (props) => {\n  return;\n  <div>\n    {/* <span\n          className={classNames({\n            invisible: isSessionStopped,\n            visible: !isSessionStopped,\n          })}\n        /> */}\n\n    {/* TODO: This area should show only when a focus or break session is running or pauses */}\n\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n        <h2 data-testid=\"session-title\">\n          {props.focusTimer > 0\n            ? //need to import inputFocusTimer so this doesn't countdown\n              `Focusing for ${secondsToDuration(props.inputFocusTime)} minutes`\n            : `On Break for ${secondsToDuration(props.inputBreakTime)} minutes`}\n        </h2>\n        {/* TODO: Update message below to include time remaining in the current session */}\n        <p className=\"lead\" data-testid=\"session-sub-title\">\n          {props.focusTimer > 0\n            ? secondsToDuration(props.focusTimer)\n            : secondsToDuration(props.breakTimer)}{' '}\n          remaining\n        </p>\n      </div>\n    </div>\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        <div className=\"progress\" style={{ height: '20px' }}>\n          <div\n            className=\"progress-bar\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            aria-valuenow={\n              props.focusTimer > 0\n                ? 100 - (props.focusTimer / (props.inputFocusTime * 60)) * 100\n                : 100 - (props.breakTimer / (props.inputBreakTime * 60)) * 100\n            } // TODO: Increase aria-valuenow as elapsed time increases\n            style={\n              props.focusTimer > 0\n                ? {\n                    width: `${\n                      100 -\n                      (props.focusTimer / (props.inputFocusTime * 60)) * 100\n                    }%`,\n                  }\n                : {\n                    width: `${\n                      100 -\n                      (props.breakTimer / (props.inputBreakTime * 60)) * 100\n                    }%`,\n                  }\n            } // TODO: Increase width % as elapsed time increases\n          />\n        </div>\n      </div>\n    </div>\n  </div>;\n};\nexport default SessionRunning;\n"]},"metadata":{},"sourceType":"module"}
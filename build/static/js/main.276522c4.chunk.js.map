{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/ChangeBreakTimer.js","pomodoro/ChangeFocusTimer.js","pomodoro/SessionRunning.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","ChangeBreakTimer","props","data-testid","inputBreakTime","type","onClick","newTime","max","setInputBreakTime","setBreakTimer","disabled","isTimerRunning","min","ChangeFocusTimer","inputFocusTime","setInputFocusTime","setFocusTimer","SessionRunning","sessionType","focusTimer","breakTimer","invisible","visible","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","useState","setIsTimerRunning","setSessionType","isSessionStopped","setIsSessionStopped","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","audioEl","document","getElementsByClassName","play","src","aria-label","title","prevState","oi","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.276522c4.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { minutesToDuration } from '../utils/duration';\n\nconst ChangeBreakTimer = (props) => {\n  //increase BreakTime no more than 15 minutes\n  const handleIncreaseBreakClick = () => {\n    const newTime = Math.min(props.inputBreakTime + 1, 15);\n    props.setInputBreakTime(newTime);\n    props.setBreakTimer(newTime * 60);\n  };\n  //decrease BreakTime no less than 1 minute\n  const handleDecreaseBreakClick = () => {\n    const newTime = Math.max(props.inputBreakTime - 1, 1);\n    props.setInputBreakTime(newTime);\n    props.setBreakTimer(newTime * 60);\n  };\n  return (\n    <div className=\"input-group input-group-lg mb-2\">\n      <span className=\"input-group-text\" data-testid=\"duration-break\">\n        {/* TODO: Update this text to display the current break session duration */}\n        Break Duration: {minutesToDuration(props.inputBreakTime)}\n      </span>\n      <div className=\"input-group-append\">\n        {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          data-testid=\"decrease-break\"\n          onClick={handleDecreaseBreakClick}\n          disabled={props.isTimerRunning}\n        >\n          <span className=\"oi oi-minus\" />\n        </button>\n        {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          data-testid=\"increase-break\"\n          onClick={handleIncreaseBreakClick}\n          disabled={props.isTimerRunning}\n        >\n          <span className=\"oi oi-plus\" />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default ChangeBreakTimer;\n","import React from 'react';\nimport { minutesToDuration } from '../utils/duration';\n\nconst ChangeFocusTimer = (props) => {\n  //increase FocusTime no more than 60 minutes\n  const handleIncreaseFocusClick = () => {\n    const newTime = Math.min(props.inputFocusTime + 5, 60);\n    props.setInputFocusTime(newTime);\n    props.setFocusTimer(newTime * 60);\n  };\n  //decrease FocusTime no less than 5 minutes\n  const handleDecreaseFocusClick = () => {\n    const newTime = Math.max(props.inputFocusTime - 5, 5);\n    props.setInputFocusTime(newTime);\n    props.setFocusTimer(newTime * 60);\n  };\n\n  return (\n    <div className=\"input-group input-group-lg mb-2\">\n      <span className=\"input-group-text\" data-testid=\"duration-focus\">\n        {/* TODO: Update this text to display the current focus session duration */}\n        Focus Duration: {minutesToDuration(props.inputFocusTime)}\n      </span>\n      <div className=\"input-group-append\">\n        {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          data-testid=\"decrease-focus\"\n          onClick={handleDecreaseFocusClick}\n          disabled={props.isTimerRunning}\n        >\n          <span className=\"oi oi-minus\" />\n        </button>\n        {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          data-testid=\"increase-focus\"\n          onClick={handleIncreaseFocusClick}\n          disabled={props.isTimerRunning}\n        >\n          <span className=\"oi oi-plus\" />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default ChangeFocusTimer;\n","import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport classNames from '../utils/class-names';\n\nconst SessionRunning = (props) => {\n  return (\n    <div>\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            {props.sessionType === 'focus'\n              ? `Focusing for ${minutesToDuration(\n                  props.inputFocusTime\n                )} minutes`\n              : `On Break for ${minutesToDuration(\n                  props.inputBreakTime\n                )} minutes`}\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {props.sessionType === 'focus'\n              ? secondsToDuration(props.focusTimer)\n              : secondsToDuration(props.breakTimer)}{' '}\n            remaining\n          </p>\n          <p\n            className={classNames({\n              invisible: props.isTimerRunning,\n              visible: !props.isTimerRunning,\n            })}\n          >\n            PAUSED\n          </p>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: '20px' }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={\n                props.sessionType === 'focus'\n                  ? 100 - (props.focusTimer / (props.inputFocusTime * 60)) * 100\n                  : 100 - (props.breakTimer / (props.inputBreakTime * 60)) * 100\n              } // TODO: Increase aria-valuenow as elapsed time increases\n              style={\n                props.sessionType === 'focus'\n                  ? {\n                      width: `${\n                        100 -\n                        (props.focusTimer / (props.inputFocusTime * 60)) * 100\n                      }%`,\n                    }\n                  : {\n                      width: `${\n                        100 -\n                        (props.breakTimer / (props.inputBreakTime * 60)) * 100\n                      }%`,\n                    }\n              } // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default SessionRunning;\n","import React, { useState } from 'react';\nimport classNames from '../utils/class-names';\nimport useInterval from '../utils/useInterval';\nimport ChangeBreakTimer from './ChangeBreakTimer';\nimport ChangeFocusTimer from './ChangeFocusTimer';\nimport SessionRunning from './SessionRunning';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  //Focus time starts at 25 minutes/1500 seconds\n  const [focusTimer, setFocusTimer] = useState(1500);\n  //Break time starts at 5 minutes/300 seconds\n  const [breakTimer, setBreakTimer] = useState(300);\n  //user inputted times for focus and break\n\n  const [inputBreakTime, setInputBreakTime] = useState(5);\n  const [inputFocusTime, setInputFocusTime] = useState(25);\n  const [sessionType, setSessionType] = useState('focus');\n\n  const [isSessionStopped, setIsSessionStopped] = useState(true);\n\n  useInterval(\n    () => {\n      const audioEl = document.getElementsByClassName('audio-element')[0];\n\n      if (sessionType === 'focus') {\n        setBreakTimer(inputBreakTime * 60);\n        setFocusTimer(Math.max(focusTimer - 1, 0));\n        if (focusTimer === 0) {\n          audioEl.play();\n          setSessionType('break');\n        }\n      }\n\n      if (sessionType === 'break') {\n        setFocusTimer(inputFocusTime * 60);\n        setBreakTimer(Math.max(breakTimer - 1, 0));\n        if (breakTimer === 0) {\n          audioEl.play();\n          setSessionType('focus');\n        }\n      }\n      // ToDo: Implement what should happen when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsSessionStopped(false);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setIsSessionStopped(true);\n    setFocusTimer(1500);\n    setBreakTimer(300);\n    setInputBreakTime(5);\n    setInputFocusTime(25);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <audio className=\"audio-element\">\n        <source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"></source>\n      </audio>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ChangeFocusTimer\n            setFocusTimer={setFocusTimer}\n            setInputFocusTime={setInputFocusTime}\n            inputFocusTime={inputFocusTime}\n            isTimerRunning={isTimerRunning}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <ChangeBreakTimer\n              setBreakTimer={setBreakTimer}\n              setInputBreakTime={setInputBreakTime}\n              isTimerRunning={isTimerRunning}\n              inputBreakTime={inputBreakTime}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  'oi-media-play': !isTimerRunning,\n                  'oi-media-pause': isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={stopSession}\n              disabled={!isTimerRunning}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {isSessionStopped ? null : (\n          <SessionRunning\n            inputFocusTime={inputFocusTime}\n            inputBreakTime={inputBreakTime}\n            focusTimer={focusTimer}\n            breakTimer={breakTimer}\n            sessionType={sessionType}\n            isTimerRunning={isTimerRunning}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}